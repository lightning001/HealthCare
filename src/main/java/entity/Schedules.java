package entity;
// Generated May 8, 2017 8:56:39 AM by Hibernate Tools 5.2.1.Final

import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import org.codehaus.jackson.map.ObjectMapper;

import dao.DoctorDAO;

/**
 * Schedules generated by hbm2java
 */
@Entity
@XmlRootElement
@JsonIgnoreProperties({ "hibernateLazyInitializer", "handler" })
public class Schedules implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8454404002053670572L;
	@Id
	@GeneratedValue

	private int idSchedule;
	/*
	 * ngay thu may trong tuan
	 */
	private String dates;
	private Integer startTime;
	private Integer stopTime;
	private String workspace;
	@ManyToMany()
	@JsonIgnore
	private Set<Doctor> doctors = new HashSet<Doctor>(0);

	public Schedules() {
	}

	public Schedules(Schedules schedule) {
		this.dates = schedule.getDates();
		this.startTime = schedule.getStartTime();
		this.stopTime = schedule.getStopTime();
		this.workspace = schedule.getWorkspace();
	}

	public Schedules(int idSchedule, String dates) {
		this.idSchedule = idSchedule;
		this.dates = dates;
	}

	public Schedules(String dates, Integer startTime, Integer stopTime, String workspace) {
		super();
		this.dates = dates;
		this.startTime = startTime;
		this.stopTime = stopTime;
		this.workspace = workspace;
	}

	public Schedules(int idSchedule, String dates, Integer startTime, Integer stopTime, String workspace) {
		super();
		this.idSchedule = idSchedule;
		this.dates = dates;
		this.startTime = startTime;
		this.stopTime = stopTime;
		this.workspace = workspace;
	}

	public Schedules(int idSchedule, String dates, Integer startTime, Integer stopTime, String workspace,
			Set<Doctor> doctors) {
		this.idSchedule = idSchedule;
		this.dates = dates;
		this.startTime = startTime;
		this.stopTime = stopTime;
		this.workspace = workspace;
		this.doctors = doctors;
	}

	public int getIdSchedule() {
		return this.idSchedule;
	}

	@XmlElement
	public void setIdSchedule(int idSchedule) {
		this.idSchedule = idSchedule;
	}

	public String getDates() {
		return this.dates;
	}

	@XmlElement
	public void setDates(String dates) {
		this.dates = dates;
	}

	public Integer getStartTime() {
		return this.startTime;
	}

	@XmlElement
	public void setStartTime(Integer startTime) {
		this.startTime = startTime;
	}

	public Integer getStopTime() {
		return this.stopTime;
	}

	@XmlElement
	public void setStopTime(Integer stopTime) {
		this.stopTime = stopTime;
	}

	public String getWorkspace() {
		return this.workspace;
	}

	@XmlElement
	public void setWorkspace(String workspace) {
		this.workspace = workspace;
	}

	public Set<Doctor> getDoctors() {
		return doctors;
	}

	@XmlElement
	public void setDoctors(Set<Doctor> doctors) {
		this.doctors = doctors;
	}

	@JsonIgnore
	public String getStartTimeClock() {
		return getTime(startTime);
	}

	@JsonIgnore
	public String getStopTimeClock() {
		return getTime(stopTime);
	}

	private String getTime(int time) {
		int d = time / 86400;
		int h = (time % 86400) / 3600;
		int m = (time % 86400 % 3600) / 60;
		StringBuffer sb = new StringBuffer();
		if (d > 0) {
			sb.append(d + "d");
		}
		sb.append(h + "h");
		sb.append(m + "m");
		return sb.toString();
	}

	@Override
	public String toString() {
		return "Schedules " + getIdSchedule() + ":\t" + getDates() + " " + getStartTimeClock() + " - "
				+ getStopTimeClock() + "\t" + getWorkspace();
	}

	public String toJson() {
		ObjectMapper mapper = new ObjectMapper();
		try {
			return mapper.writeValueAsString(this);
		} catch (Exception e) {
			return "{\"" + Schedules.class.getName() + "\": null}";
		}
	}

	public static Schedules parseJson(String json) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			Schedules sche = mapper.readValue(json, Schedules.class);
			return sche;
		} catch (Exception e) {
			return null;
		}
	}

	public static List<Schedules> parseJsonList(String json) {
		try {
			ObjectMapper mapper = new ObjectMapper();
			json = json.trim();
			if (json.startsWith("{\"scheduleList\":")) {
				json = json.substring(json.indexOf(":") + 1, json.length() - 1);
			}
			List<Schedules> list = mapper.readValue(json,
					mapper.getTypeFactory().constructCollectionType(List.class, Schedules.class));
			list.sort(DoctorDAO.COMPARATOR);
			return list;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		} catch (Exception e2) {
			e2.printStackTrace();
			return null;
		}
	}

	public static Set<Schedules> parseJsonListToSet(String json) {
		try {
			ObjectMapper mapper = new ObjectMapper();
			json = json.trim();
			if (json.startsWith("{\"scheduleList\":")) {
				json = json.substring(json.indexOf(":") + 1, json.length() - 1);
			}
			Set<Schedules> list = mapper.readValue(json,
					mapper.getTypeFactory().constructCollectionType(Set.class, Schedules.class));
			return list;
		} catch (IOException e) {

			e.printStackTrace();
			return null;
		}
	}

	public static String toJsonList(List<Schedules> list) {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("{\"scheduleList\":[");
			for (int i = 0; i < list.size(); i++) {
				if (i > 0)
					sb.append(",");
				sb.append(list.get(i).toJson());
			}
			sb.append("]}");
			return sb.toString();
		} catch (Exception e) {
			return "{\"scheduleList\": null}";
		}
	}

	public static String toJsonList(Set<Schedules> list) {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("{\"scheduleList\":[");
			int count = 0;
			for (Schedules sc : list) {
				if (count > 0)
					sb.append(",");
				sb.append(sc.toJson() + "\n");
				count++;
			}
			sb.append("]}");
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
			return "{\"scheduleList\": null}";
		}
	}
}
