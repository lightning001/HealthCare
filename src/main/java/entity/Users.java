package entity;
// Generated May 8, 2017 8:56:39 AM by Hibernate Tools 5.2.1.Final

import java.io.IOException;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import org.codehaus.jackson.map.ObjectMapper;

import dao.DoctorDAO;
import dao.UserDAO;

/**
 * Users generated by hbm2java
 */
@Entity
@XmlRootElement
@JsonIgnoreProperties({ "hibernateLazyInitializer", "handler" })
public class Users implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3796766601258633930L;
	@Id
	@GeneratedValue
	private int idUser;
	private String email;
	private String passwords;
	private Date timeCreate;
	@JsonIgnore
	@OneToMany(mappedBy = "users")
	private Set<Reservation> reservations = new HashSet<Reservation>(0);
	@JsonIgnore
	@OneToMany(mappedBy = "users")
	private Set<Patient> patients = new HashSet<Patient>(0);
	@JsonIgnore
	@OneToMany(mappedBy = "users")
	private Set<Message> messages = new HashSet<Message>(0);

	public Users() {
	}

	public Users(int idUser, Date timeCreate) {
		this.idUser = idUser;
		this.timeCreate = timeCreate;
	}

	public Users(int idUser, String email, String passwords, Date timeCreate) {
		super();
		this.idUser = idUser;
		this.email = email;
		this.passwords = passwords;
		this.timeCreate = timeCreate;
	}

	public Users(String email, String passwords, Date timeCreate) {
		super();
		this.email = email;
		this.passwords = passwords;
		this.timeCreate = timeCreate;
	}

	public Users(int idUser, String email, String passwords, Date timeCreate, Set<Reservation> reservations,
			Set<Patient> patients, Set<Message> messages) {
		super();
		this.idUser = idUser;
		this.email = email;
		this.passwords = passwords;
		this.timeCreate = timeCreate;
		this.reservations = reservations;
		this.patients = patients;
		this.messages = messages;
	}

	public int getIdUser() {
		return this.idUser;
	}

	@XmlElement
	public void setIdUser(int idUser) {
		this.idUser = idUser;
	}

	public String getEmail() {
		return this.email;
	}

	@XmlElement
	public void setEmail(String email) {
		this.email = email;
	}

	public String getPasswords() {
		return this.passwords;
	}

	@XmlElement
	public void setPasswords(String passwords) {
		this.passwords = passwords;
	}

	public Date getTimeCreate() {
		return this.timeCreate;
	}

	@XmlElement
	public void setTimeCreate(Date timeCreate) {
		this.timeCreate = timeCreate;
	}

	public Set<Reservation> getReservations() {
		return reservations;
	}

	@XmlElement
	public void setReservations(Set<Reservation> reservations) {
		this.reservations = reservations;
	}

	public Set<Patient> getPatients() {
		return patients;
	}

	@XmlElement
	public void setPatients(Set<Patient> patients) {
		this.patients = patients;
	}

	public Set<Message> getMessages() {
		return messages;
	}

	@XmlElement
	public void setMessages(Set<Message> messages) {
		this.messages = messages;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Users [idUser=");
		builder.append(idUser);
		builder.append(", email=");
		builder.append(email);
		builder.append(", passwords=");
		builder.append(passwords);
		builder.append(", timeCreate=");
		builder.append(timeCreate);
		builder.append("]");
		return builder.toString();
	}

	public String toJson() {
		ObjectMapper mapper = new ObjectMapper();
		try {
			return mapper.writeValueAsString(this);
		} catch (Exception e) {
			return "{\"" + Users.class.getName() + "\": null}";
		}
	}

	public static Users parseJson(String json) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			Users doctor = mapper.readValue(json, Users.class);
			return doctor;
		} catch (Exception e) {
			return null;
		}
	}

	public static List<Users> parseJsonList(String json) {
		try {
			ObjectMapper mapper = new ObjectMapper();
			json = json.trim();
			if (json.startsWith("{\"userList\":")) {
				json = json.substring(json.indexOf(":") + 1, json.length() - 1);
			}
			List<Users> list = mapper.readValue(json,
					mapper.getTypeFactory().constructCollectionType(List.class, Users.class));
			return list;
		} catch (IOException e) {
			return null;
		}
	}

	public static String toJsonList(List<Users> list) {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("{\"userList\":[");
			for (int i = 0; i < list.size(); i++) {
				if (i > 0)
					sb.append(",");
				sb.append(list.get(i).toJson());
			}
			sb.append("]}");
			return sb.toString();
		} catch (Exception e) {
			return "{\"userList\":null}";
		}
	}

	public Message addMessage(int idDoctor, String content) {
		Doctor doctor = DoctorDAO.getDoctor(idDoctor);
		Message message = new Message(doctor, this, new Date(), content, false, true, false);
		this.messages.add(message);
		UserDAO.update(this);
		return message;
	}
}
